save.image("C:\\Users\\Администратор\\Desktop\\.RData")
require(stats) # для lowess, rpois, rnorm
 plot(cars)
 lines(lowess(cars))## Сортируем объекты согласно расстояния до объекта z
sortObjectsByDist <- function(xl, z, metricFunction =
euclideanDistance)
{
 l <- dim(xl)[1]
 n <- dim(xl)[2] - 1
 ## Создаём матрицу расстояний
 distances <- matrix(NA, l, 2)
 for (i in 1:l)
 {
 distances[i, ] <- c(i, metricFunction(xl[i, 1:n], z))
 }
 ## Сортируем
 orderedXl <- xl[order(distances[, 2]), ]
 return (orderedXl);
}
## Применяем метод kNN
kNN <- function(xl, z, k)
{
 ## Сортируем выборку согласно классифицируемого
объекта
 orderedXl <- sortObjectsByDist(xl, z)
 n <- dim(orderedXl)[2] - 1
 ## Получаем классы первых k соседей
 classes <- orderedXl[1:k, n + 1]
 ## Составляем таблицу встречаемости каждого класса
22
 counts <- table(classes)
 ## Находим класс, который доминирует среди первых k
соседей
 class <- names(which.max(counts))
 return (class)
}
## Рисуем выборку
colors <- c("setosa" = "red", "versicolor" = "green3",
"virginica" = "blue")
plot(iris[, 3:4], pch = 21, bg = colors[iris$Species], col
= colors[iris$Species], asp = 1)
## Классификация одного заданного объекта
z <- c(2.7, 1)
xl <- iris[, 3:5]
class <- kNN(xl, z, k=6)
iris
colors <- c("setosa" = "red", "versicolor" = "green3", "virginica" = "blue")
plot(iris[, 3:4], pch = 21, bg = colors[iris$Species], col = colors[iris$Species])
## Евклидово расстояние
EuclideanDistance <- function(u, v)
{
sqrt(sum((u-v)^2))
}
sortObjectsByDist <- function(x1, z, metricFunction = euclideanDistance)
{
l <- dim(x1)[1]
n <- dim(x1)[2]-1
distances <- matrix(NA, 1, 2)
for(i in 1:1)
{
distances[i, ] <- c(i, metricFunction(x1[i, 1:n], z))
}
orderedX1 <- x1[order(distances[, 2]), ]
return (orderedX1);
}
kNN <- function(x1, z, k)
{
orderedX1 <- sortObjectsByDist(x1,z)
n <- dim(orderedX1)[2]-1
classes <- orderedX1[1:K, n+1]
counts <- table(classes)
class <- names(which.max(counts))
return(class)
}
colors <- c("setosa"="red", "versicolor"="green3","virginica"="blue")
plot(iris[,3:4], pch=21, bg=colors[iris$Species], col=colors[iris$Species], asp=1)
z <- c(2.7, 1)
x1 <- iris[,3:5]
class <- kNN(x1, z, k=6)
class <- kNN(x1,z)
kNN <- function(xl, z, k)
{
orderedXl <- sortObjectsByDist(xl, z, k)
n <- dim(orderedXl)[2] - 1
classes <- orderedXl[1:k, n + 1]
counts <- table(classes)
class <- names(which.max(counts))
return (class)
}
colors <- c("setosa" = "red", "versicolor" = "green3", "virginica" = "blue")
plot(iris[, 3:4], pch = 21, bg = colors[iris$Species], col = colors[iris$Species], asp = 1)
z <- c(2.7, 1)
xl <- iris[, 3:5]
class <- kNN(xl, z, k=6)
points(z[1], z[2], pch = 22, bg = colors[class], asp = 1)
sortObjectsByDist <- function(xl, z, metricFunction =
euclideanDistance)
{
 l <- dim(xl)[1]
 n <- dim(xl)[2] - 1
 ## Создаём матрицу расстояний
 distances <- matrix(NA, l, 2)
 for (i in 1:l)
 {
 distances[i, ] <- c(i, euclideanDistance(xl[i, 1:n], z))
 }
 ## Сортируем
 orderedXl <- xl[order(distances[, 2]), ]
 return (orderedXl);
}
z <- c(2.7, 1)
xl <- iris[, 3:5]
class <- kNN(xl, z, k=6)
points(z[1], z[2], pch = 22, bg = colors[class], asp = 1)
euclideanDistance <- function(u, v)
{
 sqrt(sum((u - v)^2))
}
z <- c(2.7, 1)
xl <- iris[, 3:5]
class <- kNN(xl, z, k=6)
points(z[1], z[2], pch = 22, bg = colors[class], asp = 1)
save.image("C:\\Users\\Администратор\\Desktop\\knn")
z <- c(2.7, 1)
xl <- iris[, 3:5]
class <- kNN(xl, z, k=1)
points(z[1], z[2], pch = 22, bg = colors[class], asp = 1)
euclideanDistance <- function(u, v)
{
 sqrt(sum((u - v)^2))
}
sortObjectsByDist <- function(xl, z, metricFunction =
euclideanDistance)
{
 l <- dim(xl)[1]
 n <- dim(xl)[2] - 1
 ## Создаём матрицу расстояний
 distances <- matrix(NA, l, 2)
 for (i in 1:l)
 {
 distances[i, ] <- c(i,euclideanDistance(xl[i, 1:n], z))
}
orderedXl <- xl[order(distances[, 2]), ]
 return (orderedXl);
}
kNN <- function(xl, z, k)
{
orderedXl <- sortObjectsByDist(xl, z, k)
n <- dim(orderedXl)[2] - 1
classes <- orderedXl[1:k, n + 1]
counts <- table(classes)
class <- names(which.max(counts))
 return (class)
}
colors <- c("setosa" = "red", "versicolor" = "green3",
"virginica" = "blue")
plot(iris[, 3:4], pch = 21, bg = colors[iris$Species], col
= colors[iris$Species], asp = 1)
z <- c(2.7, 1)
xl <- iris[, 3:5]
class <- kNN(xl, z, k=6)
points(z[1], z[2], pch = 22, bg = colors[class], asp = 1)
